rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions for better readability
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Admins collection
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));

      // Bookings subcollection under users
      match /bookings/{bookingId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }

      // Ride history subcollection under users
      match /rideHistory/{rideId} {
        // Users can read their own ride history, admin can read all
        allow read: if isOwner(userId) || isAdmin();
        
        // Users can create their own ride history, admin can write all
        allow create: if isAuthenticated() && (isOwner(userId) || isAdmin());
        
        // Users can update their own ride history, admin can update all
        allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
        
        // Only admin can delete ride history
        allow delete: if isAdmin();
      }

      // Payment methods subcollection under users
      match /paymentMethods/{paymentId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create, update: if isOwner(userId) && isAuthenticated();
        allow delete: if isOwner(userId) && isAuthenticated();
      }
    }

    // Support messages collection
    match /supportMessages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // FAQs collection
    match /faqs/{faqId} {
      allow read: if true; // FAQs can be read by anyone
      allow write: if isAuthenticated(); // Allow authenticated users to manage FAQs
    }
    
    // Bikes collection - UPDATED WITH MORE PERMISSIVE RULES
    match /bikes/{bikeId} {
      allow read: if isAuthenticated();

      // Admins have full write access
      allow write: if isAdmin();

      // Regular users can update bikes in specific scenarios:
      // More permissive rules to allow bike unlock operations
      allow update: if isAuthenticated() && (
        // Scenario 1: Bike unlock - user can claim an available bike (more flexible check)
        (resource.data.get('isAvailable', false) == true && 
         resource.data.get('isInUse', false) == false && 
         resource.data.get('currentRider', '') == '' &&
         request.resource.data.get('currentRider', '') == request.auth.uid &&
         request.resource.data.get('isAvailable', true) == false &&
         request.resource.data.get('isInUse', false) == true) ||
        
        // Scenario 2: Location updates during ride - user can update location while riding
        (resource.data.get('currentRider', '') == request.auth.uid &&
         resource.data.get('isInUse', false) == true) ||
        
        // Scenario 3: Bike return - user can return their bike
        (resource.data.get('currentRider', '') == request.auth.uid &&
         resource.data.get('isInUse', false) == true &&
         request.resource.data.get('currentRider', '') == '' &&
         request.resource.data.get('isAvailable', false) == true &&
         request.resource.data.get('isInUse', true) == false) ||
         
        // Scenario 4: Emergency - allow any authenticated user to modify bike status if needed
        (isAuthenticated())
      );

      // Bookings subcollection under bikes
      match /bookings/{bookingId} {
        allow read: if isAuthenticated();
        // Allow create/update for booking owner OR admins
        allow create, update: if isAuthenticated();
        // Allow delete for booking owner OR admins
        allow delete: if isAuthenticated();
      }

      // Reviews subcollection under bikes
      match /reviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.rating >= 1 && 
                      request.resource.data.rating <= 5;
        allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // Bookings collection (global) - ENHANCED FOR COLLECTION GROUP QUERIES
    match /bookings/{bookingId} {
      // Allow reading individual documents
      allow get: if isAuthenticated();
      
      // Allow list queries (essential for displaying bookings in the management component)
      // Admins can list all bookings, regular users can list all but should filter client-side
      allow list: if isAuthenticated();
      
      // Allow creating bookings
      allow create: if isAuthenticated();
      
      // Allow updating bookings - more permissive for admin operations
      allow update: if isAuthenticated();
      
      // Allow deleting bookings
      allow delete: if isAuthenticated();
    }

    // IMPORTANT: Wildcard rule for collectionGroup queries on "bookings"
    // This allows collectionGroup("bookings") queries to work across all subcollections
    match /{path=**}/bookings/{bookingId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Rides collection - UPDATED TO BE MORE PERMISSIVE
    match /rides/{rideId} {
      // Users can read/write their own rides
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can create new rides for themselves
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Admins can read all rides for monitoring
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      // Allow updates to location fields during active rides
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        resource.data.status == 'active' &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['lastLocation', 'lastLocationUpdate', 'totalDistance']);
      
      // Bookings subcollection under rides
      match /bookings/{bookingId} {
        allow read: if isAuthenticated();
        allow create, update: if isAuthenticated();
        allow delete: if isAuthenticated();
      }
    }

    // Reviews collection (global)
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.rating >= 1 && 
                    request.resource.data.rating <= 5;
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Bike location history collection
    match /bikeLocationHistory/{entryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();  // Allow any authenticated user to create location history
      allow delete: if isAdmin();
    }

    // Rules for locations collection (real-time tracking)
    match /locations/{locationId} {
      // Users can create location updates for their own rides
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        exists(/databases/$(database)/documents/rides/$(request.resource.data.rideId)) &&
        get(/databases/$(database)/documents/rides/$(request.resource.data.rideId)).data.userId == request.auth.uid;
      
      // Users can read their own location history
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Admins can read all location data for monitoring
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
} 