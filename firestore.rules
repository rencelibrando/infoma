rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions for better readability
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Admins collection
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;

      // Bookings subcollection under users
      match /bookings/{bookingId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Support messages collection
    match /supportMessages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAdmin();
    }

    // FAQs collection
    match /faqs/{faqId} {
      allow read: if true; // FAQs can be read by anyone
      allow write: if isAuthenticated(); // Allow authenticated users to manage FAQs
    }
    
    // Bikes collection - UPDATED WITH MORE PERMISSIVE RULES
    match /bikes/{bikeId} {
      allow read: if isAuthenticated();

      // Admins have full write access
      allow write: if isAdmin();

      // Regular users can update bikes in specific scenarios:
      // More permissive rules to allow bike unlock operations
      allow update: if isAuthenticated() && (
        // Scenario 1: Bike unlock - user can claim an available bike (more flexible check)
        (resource.data.get('isAvailable', false) == true && 
         resource.data.get('isInUse', false) == false && 
         resource.data.get('currentRider', '') == '' &&
         request.resource.data.get('currentRider', '') == request.auth.uid &&
         request.resource.data.get('isAvailable', true) == false &&
         request.resource.data.get('isInUse', false) == true) ||
        
        // Scenario 2: Location updates during ride - user can update location while riding
        (resource.data.get('currentRider', '') == request.auth.uid &&
         resource.data.get('isInUse', false) == true) ||
        
        // Scenario 3: Bike return - user can return their bike
        (resource.data.get('currentRider', '') == request.auth.uid &&
         resource.data.get('isInUse', false) == true &&
         request.resource.data.get('currentRider', '') == '' &&
         request.resource.data.get('isAvailable', false) == true &&
         request.resource.data.get('isInUse', true) == false) ||
         
        // Scenario 4: Emergency - allow any authenticated user to modify bike status if needed
        (isAuthenticated())
      );

      // Bookings subcollection under bikes
      match /bookings/{bookingId} {
        allow read: if isAuthenticated();
        allow create, update: if isAuthenticated() &&
                              request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() &&
                     get(/databases/$(database)/documents/bikes/$(bikeId)/bookings/$(bookingId))
                       .data.userId == request.auth.uid;
      }

      // Reviews subcollection under bikes
      match /reviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.rating >= 1 && 
                      request.resource.data.rating <= 5;
        allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // Bookings collection (global) - FIXED FOR PROPER QUERYING
    match /bookings/{bookingId} {
      // Allow reading individual documents
      allow get: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || isAdmin());
      
      // Allow list queries (essential for displaying bookings in the management component)
      // Admins can list all bookings, regular users can list all but should filter client-side
      allow list: if isAuthenticated();
      
      // Allow creating bookings
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
      
      // Allow updating bookings
      allow update: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow deleting bookings
      allow delete: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Rides collection - UPDATED TO BE MORE PERMISSIVE
    match /rides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();  // Allow any authenticated user to create rides
      allow update: if isAuthenticated() &&
                    (resource.data.get('userId', '') == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() &&
                    (resource.data.get('userId', '') == request.auth.uid || isAdmin());
    }

    // Reviews collection (global)
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.rating >= 1 && 
                    request.resource.data.rating <= 5;
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Bike location history collection
    match /bikeLocationHistory/{entryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();  // Allow any authenticated user to create location history
      allow delete: if isAdmin();
    }
  }
}



