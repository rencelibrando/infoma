rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	allow read, write: if request.auth != null && request.app_check.token != null;
    
    match /admins/{adminId} {
      allow read: if request.auth != null && request.app_check.token != null;
      allow write: if request.auth != null && 
                   request.app_check.token != null &&
                   exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    
    // Bikes collection
    match /bikes/{bikeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      // Allow updating location and status when a user is riding the bike
      allow update: if request.auth != null && 
                    resource.data.currentUserId == request.auth.uid &&
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['latitude', 'longitude', 'lastLocationUpdate']);
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rides collection - for tracking who is using which bike
    match /rides/{rideId} {
      // Anyone can read ride data
      allow read: if request.auth != null;
      
      // Only admins can read all rides
      allow list: if request.auth != null && 
                exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      // A user can create a ride for themselves
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;
      
      // A user can only update their own rides
      allow update: if request.auth != null && 
                   (resource.data.userId == request.auth.uid || 
                    exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Bookings collection - for bike reservations
    match /bookings/{bookingId} {
      // Users can read their own bookings, admins can read all bookings
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.userId || 
                  exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
      
      // Only admins can list all bookings
      allow list: if request.auth != null && 
                 exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      
      // Users can create bookings for themselves
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;
      
      // Users can update their own bookings with limited fields, admins can update any booking
      allow update: if request.auth != null && 
                   (
                     // Admins can update any field
                     exists(/databases/$(database)/documents/admins/$(request.auth.uid)) ||
                     // Users can only update their own bookings with limited fields
                     (resource.data.userId == request.auth.uid && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['notes', 'status']) &&
                      // Users can only cancel their bookings, not confirm or complete them
                      (
                        !('status' in request.resource.data.diff(resource.data).affectedKeys()) ||
                        request.resource.data.status == 'cancelled'
                      )
                     )
                   );
      
      // Only admins can delete bookings
      allow delete: if request.auth != null && 
                    exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Bike location history collection - for tracking bike movements
    match /bikeLocationHistory/{entryId} {
      // Only authenticated users can read location history
      allow read: if request.auth != null;
      
      // Users can create location history for bikes they're currently using
      allow create: if request.auth != null && 
                    exists(/databases/$(database)/documents/bikes/$(request.resource.data.bikeId)) && 
                    get(/databases/$(database)/documents/bikes/$(request.resource.data.bikeId)).data.currentUserId == request.auth.uid;
      
      // Only admins can delete location history
      allow delete: if request.auth != null && 
                   exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 10, 1);
    }
  }
}



